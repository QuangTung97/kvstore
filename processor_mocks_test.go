// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package kvstore

import (
	"net"
	"sync"
)

// Ensure, that ResponseSenderMock does implement ResponseSender.
// If this is not the case, regenerate this file with moq.
var _ ResponseSender = &ResponseSenderMock{}

// ResponseSenderMock is a mock implementation of ResponseSender.
//
// 	func TestSomethingThatUsesResponseSender(t *testing.T) {
//
// 		// make and configure a mocked ResponseSender
// 		mockedResponseSender := &ResponseSenderMock{
// 			SendFunc: func(ip net.IP, port uint16, data []byte) error {
// 				panic("mock out the Send method")
// 			},
// 		}
//
// 		// use mockedResponseSender in code that requires ResponseSender
// 		// and then make assertions.
//
// 	}
type ResponseSenderMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(ip net.IP, port uint16, data []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// IP is the ip argument value.
			IP net.IP
			// Port is the port argument value.
			Port uint16
			// Data is the data argument value.
			Data []byte
		}
	}
	lockSend sync.RWMutex
}

// Send calls SendFunc.
func (mock *ResponseSenderMock) Send(ip net.IP, port uint16, data []byte) error {
	if mock.SendFunc == nil {
		panic("ResponseSenderMock.SendFunc: method is nil but ResponseSender.Send was just called")
	}
	callInfo := struct {
		IP   net.IP
		Port uint16
		Data []byte
	}{
		IP:   ip,
		Port: port,
		Data: data,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(ip, port, data)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedResponseSender.SendCalls())
func (mock *ResponseSenderMock) SendCalls() []struct {
	IP   net.IP
	Port uint16
	Data []byte
} {
	var calls []struct {
		IP   net.IP
		Port uint16
		Data []byte
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
