// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package parser

import (
	"sync"
)

// Ensure, that CommandHandlerMock does implement CommandHandler.
// If this is not the case, regenerate this file with moq.
var _ CommandHandler = &CommandHandlerMock{}

// CommandHandlerMock is a mock implementation of CommandHandler.
//
// 	func TestSomethingThatUsesCommandHandler(t *testing.T) {
//
// 		// make and configure a mocked CommandHandler
// 		mockedCommandHandler := &CommandHandlerMock{
// 			OnLGETFunc: func(key []byte)  {
// 				panic("mock out the OnLGET method")
// 			},
// 		}
//
// 		// use mockedCommandHandler in code that requires CommandHandler
// 		// and then make assertions.
//
// 	}
type CommandHandlerMock struct {
	// OnLGETFunc mocks the OnLGET method.
	OnLGETFunc func(key []byte)

	// calls tracks calls to the methods.
	calls struct {
		// OnLGET holds details about calls to the OnLGET method.
		OnLGET []struct {
			// Key is the key argument value.
			Key []byte
		}
	}
	lockOnLGET sync.RWMutex
}

// OnLGET calls OnLGETFunc.
func (mock *CommandHandlerMock) OnLGET(key []byte) {
	if mock.OnLGETFunc == nil {
		panic("CommandHandlerMock.OnLGETFunc: method is nil but CommandHandler.OnLGET was just called")
	}
	callInfo := struct {
		Key []byte
	}{
		Key: key,
	}
	mock.lockOnLGET.Lock()
	mock.calls.OnLGET = append(mock.calls.OnLGET, callInfo)
	mock.lockOnLGET.Unlock()
	mock.OnLGETFunc(key)
}

// OnLGETCalls gets all the calls that were made to OnLGET.
// Check the length with:
//     len(mockedCommandHandler.OnLGETCalls())
func (mock *CommandHandlerMock) OnLGETCalls() []struct {
	Key []byte
} {
	var calls []struct {
		Key []byte
	}
	mock.lockOnLGET.RLock()
	calls = mock.calls.OnLGET
	mock.lockOnLGET.RUnlock()
	return calls
}
