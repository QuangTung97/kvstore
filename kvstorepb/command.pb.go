// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: command.proto

package kvstorepb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CommandType for all types
type CommandType int32

const (
	// COMMAND_TYPE_UNSPECIFIED
	CommandType_COMMAND_TYPE_UNSPECIFIED CommandType = 0
	// COMMAND_TYPE_LEASE_GET
	CommandType_COMMAND_TYPE_LEASE_GET CommandType = 1
	// COMMAND_TYPE_LEASE_SET
	CommandType_COMMAND_TYPE_LEASE_SET CommandType = 2
	// COMMAND_TYPE_INVALIDATE
	CommandType_COMMAND_TYPE_INVALIDATE CommandType = 3
)

var CommandType_name = map[int32]string{
	0: "COMMAND_TYPE_UNSPECIFIED",
	1: "COMMAND_TYPE_LEASE_GET",
	2: "COMMAND_TYPE_LEASE_SET",
	3: "COMMAND_TYPE_INVALIDATE",
}

var CommandType_value = map[string]int32{
	"COMMAND_TYPE_UNSPECIFIED": 0,
	"COMMAND_TYPE_LEASE_GET":   1,
	"COMMAND_TYPE_LEASE_SET":   2,
	"COMMAND_TYPE_INVALIDATE":  3,
}

func (x CommandType) String() string {
	return proto.EnumName(CommandType_name, int32(x))
}

func (CommandType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}

// LeaseStatus status of lease get
type LeaseGetStatus int32

const (
	// LEASE_GET_STATUS_FOUND
	LeaseGetStatus_LEASE_GET_STATUS_FOUND LeaseGetStatus = 0
	// LEASE_GET_STATUS_LEASE_GRANTED
	LeaseGetStatus_LEASE_GET_STATUS_LEASE_GRANTED LeaseGetStatus = 1
	// LEASE_GET_STATUS_LEASE_REJECTED
	LeaseGetStatus_LEASE_GET_STATUS_LEASE_REJECTED LeaseGetStatus = 2
)

var LeaseGetStatus_name = map[int32]string{
	0: "LEASE_GET_STATUS_FOUND",
	1: "LEASE_GET_STATUS_LEASE_GRANTED",
	2: "LEASE_GET_STATUS_LEASE_REJECTED",
}

var LeaseGetStatus_value = map[string]int32{
	"LEASE_GET_STATUS_FOUND":          0,
	"LEASE_GET_STATUS_LEASE_GRANTED":  1,
	"LEASE_GET_STATUS_LEASE_REJECTED": 2,
}

func (x LeaseGetStatus) String() string {
	return proto.EnumName(LeaseGetStatus_name, int32(x))
}

func (LeaseGetStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1}
}

// Command
type Command struct {
	Type                 CommandType        `protobuf:"varint,1,opt,name=type,proto3,enum=kvstore.CommandType" json:"type,omitempty"`
	Id                   uint64             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	LeaseGet             *CommandLeaseGet   `protobuf:"bytes,3,opt,name=lease_get,json=leaseGet,proto3" json:"lease_get,omitempty"`
	LeaseSet             *CommandLeaseSet   `protobuf:"bytes,4,opt,name=lease_set,json=leaseSet,proto3" json:"lease_set,omitempty"`
	Invalidate           *CommandInvalidate `protobuf:"bytes,5,opt,name=invalidate,proto3" json:"invalidate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{0}
}
func (m *Command) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Command.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return m.Size()
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetType() CommandType {
	if m != nil {
		return m.Type
	}
	return CommandType_COMMAND_TYPE_UNSPECIFIED
}

func (m *Command) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Command) GetLeaseGet() *CommandLeaseGet {
	if m != nil {
		return m.LeaseGet
	}
	return nil
}

func (m *Command) GetLeaseSet() *CommandLeaseSet {
	if m != nil {
		return m.LeaseSet
	}
	return nil
}

func (m *Command) GetInvalidate() *CommandInvalidate {
	if m != nil {
		return m.Invalidate
	}
	return nil
}

// CommandResult for response data
type CommandResult struct {
	Type                 CommandType              `protobuf:"varint,1,opt,name=type,proto3,enum=kvstore.CommandType" json:"type,omitempty"`
	Id                   uint64                   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	LeaseGet             *CommandLeaseGetResult   `protobuf:"bytes,3,opt,name=lease_get,json=leaseGet,proto3" json:"lease_get,omitempty"`
	LeaseSet             *CommandLeaseSetResult   `protobuf:"bytes,4,opt,name=lease_set,json=leaseSet,proto3" json:"lease_set,omitempty"`
	Invalidate           *CommandInvalidateResult `protobuf:"bytes,5,opt,name=invalidate,proto3" json:"invalidate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CommandResult) Reset()         { *m = CommandResult{} }
func (m *CommandResult) String() string { return proto.CompactTextString(m) }
func (*CommandResult) ProtoMessage()    {}
func (*CommandResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{1}
}
func (m *CommandResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResult.Merge(m, src)
}
func (m *CommandResult) XXX_Size() int {
	return m.Size()
}
func (m *CommandResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResult proto.InternalMessageInfo

func (m *CommandResult) GetType() CommandType {
	if m != nil {
		return m.Type
	}
	return CommandType_COMMAND_TYPE_UNSPECIFIED
}

func (m *CommandResult) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CommandResult) GetLeaseGet() *CommandLeaseGetResult {
	if m != nil {
		return m.LeaseGet
	}
	return nil
}

func (m *CommandResult) GetLeaseSet() *CommandLeaseSetResult {
	if m != nil {
		return m.LeaseSet
	}
	return nil
}

func (m *CommandResult) GetInvalidate() *CommandInvalidateResult {
	if m != nil {
		return m.Invalidate
	}
	return nil
}

// CommandLeaseGet for lease get
type CommandLeaseGet struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandLeaseGet) Reset()         { *m = CommandLeaseGet{} }
func (m *CommandLeaseGet) String() string { return proto.CompactTextString(m) }
func (*CommandLeaseGet) ProtoMessage()    {}
func (*CommandLeaseGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{2}
}
func (m *CommandLeaseGet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandLeaseGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandLeaseGet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandLeaseGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandLeaseGet.Merge(m, src)
}
func (m *CommandLeaseGet) XXX_Size() int {
	return m.Size()
}
func (m *CommandLeaseGet) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandLeaseGet.DiscardUnknown(m)
}

var xxx_messageInfo_CommandLeaseGet proto.InternalMessageInfo

func (m *CommandLeaseGet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// CommandLeaseGetResult for lease get response
type CommandLeaseGetResult struct {
	Status               LeaseGetStatus `protobuf:"varint,1,opt,name=status,proto3,enum=kvstore.LeaseGetStatus" json:"status,omitempty"`
	LeaseId              uint64         `protobuf:"varint,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	Value                string         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CommandLeaseGetResult) Reset()         { *m = CommandLeaseGetResult{} }
func (m *CommandLeaseGetResult) String() string { return proto.CompactTextString(m) }
func (*CommandLeaseGetResult) ProtoMessage()    {}
func (*CommandLeaseGetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{3}
}
func (m *CommandLeaseGetResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandLeaseGetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandLeaseGetResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandLeaseGetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandLeaseGetResult.Merge(m, src)
}
func (m *CommandLeaseGetResult) XXX_Size() int {
	return m.Size()
}
func (m *CommandLeaseGetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandLeaseGetResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommandLeaseGetResult proto.InternalMessageInfo

func (m *CommandLeaseGetResult) GetStatus() LeaseGetStatus {
	if m != nil {
		return m.Status
	}
	return LeaseGetStatus_LEASE_GET_STATUS_FOUND
}

func (m *CommandLeaseGetResult) GetLeaseId() uint64 {
	if m != nil {
		return m.LeaseId
	}
	return 0
}

func (m *CommandLeaseGetResult) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// CommandLeaseSet for lease set
type CommandLeaseSet struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	LeaseId              uint64   `protobuf:"varint,2,opt,name=lease_id,json=leaseId,proto3" json:"lease_id,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandLeaseSet) Reset()         { *m = CommandLeaseSet{} }
func (m *CommandLeaseSet) String() string { return proto.CompactTextString(m) }
func (*CommandLeaseSet) ProtoMessage()    {}
func (*CommandLeaseSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{4}
}
func (m *CommandLeaseSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandLeaseSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandLeaseSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandLeaseSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandLeaseSet.Merge(m, src)
}
func (m *CommandLeaseSet) XXX_Size() int {
	return m.Size()
}
func (m *CommandLeaseSet) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandLeaseSet.DiscardUnknown(m)
}

var xxx_messageInfo_CommandLeaseSet proto.InternalMessageInfo

func (m *CommandLeaseSet) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CommandLeaseSet) GetLeaseId() uint64 {
	if m != nil {
		return m.LeaseId
	}
	return 0
}

func (m *CommandLeaseSet) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// CommandLeaseSetResult for lease set
type CommandLeaseSetResult struct {
	Affected             bool     `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandLeaseSetResult) Reset()         { *m = CommandLeaseSetResult{} }
func (m *CommandLeaseSetResult) String() string { return proto.CompactTextString(m) }
func (*CommandLeaseSetResult) ProtoMessage()    {}
func (*CommandLeaseSetResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{5}
}
func (m *CommandLeaseSetResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandLeaseSetResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandLeaseSetResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandLeaseSetResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandLeaseSetResult.Merge(m, src)
}
func (m *CommandLeaseSetResult) XXX_Size() int {
	return m.Size()
}
func (m *CommandLeaseSetResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandLeaseSetResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommandLeaseSetResult proto.InternalMessageInfo

func (m *CommandLeaseSetResult) GetAffected() bool {
	if m != nil {
		return m.Affected
	}
	return false
}

// CommandInvalidate for invalidate
type CommandInvalidate struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandInvalidate) Reset()         { *m = CommandInvalidate{} }
func (m *CommandInvalidate) String() string { return proto.CompactTextString(m) }
func (*CommandInvalidate) ProtoMessage()    {}
func (*CommandInvalidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{6}
}
func (m *CommandInvalidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandInvalidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandInvalidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandInvalidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandInvalidate.Merge(m, src)
}
func (m *CommandInvalidate) XXX_Size() int {
	return m.Size()
}
func (m *CommandInvalidate) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandInvalidate.DiscardUnknown(m)
}

var xxx_messageInfo_CommandInvalidate proto.InternalMessageInfo

func (m *CommandInvalidate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// CommandInvalidateResult for invalidate
type CommandInvalidateResult struct {
	Affected             bool     `protobuf:"varint,1,opt,name=affected,proto3" json:"affected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandInvalidateResult) Reset()         { *m = CommandInvalidateResult{} }
func (m *CommandInvalidateResult) String() string { return proto.CompactTextString(m) }
func (*CommandInvalidateResult) ProtoMessage()    {}
func (*CommandInvalidateResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{7}
}
func (m *CommandInvalidateResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandInvalidateResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandInvalidateResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandInvalidateResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandInvalidateResult.Merge(m, src)
}
func (m *CommandInvalidateResult) XXX_Size() int {
	return m.Size()
}
func (m *CommandInvalidateResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandInvalidateResult.DiscardUnknown(m)
}

var xxx_messageInfo_CommandInvalidateResult proto.InternalMessageInfo

func (m *CommandInvalidateResult) GetAffected() bool {
	if m != nil {
		return m.Affected
	}
	return false
}

// CommandList a list of commands
type CommandList struct {
	Commands             []*Command `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CommandList) Reset()         { *m = CommandList{} }
func (m *CommandList) String() string { return proto.CompactTextString(m) }
func (*CommandList) ProtoMessage()    {}
func (*CommandList) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{8}
}
func (m *CommandList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandList.Merge(m, src)
}
func (m *CommandList) XXX_Size() int {
	return m.Size()
}
func (m *CommandList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandList.DiscardUnknown(m)
}

var xxx_messageInfo_CommandList proto.InternalMessageInfo

func (m *CommandList) GetCommands() []*Command {
	if m != nil {
		return m.Commands
	}
	return nil
}

// CommandResultList a list of command results
type CommandResultList struct {
	Results              []*CommandResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CommandResultList) Reset()         { *m = CommandResultList{} }
func (m *CommandResultList) String() string { return proto.CompactTextString(m) }
func (*CommandResultList) ProtoMessage()    {}
func (*CommandResultList) Descriptor() ([]byte, []int) {
	return fileDescriptor_213c0bb044472049, []int{9}
}
func (m *CommandResultList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandResultList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandResultList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandResultList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandResultList.Merge(m, src)
}
func (m *CommandResultList) XXX_Size() int {
	return m.Size()
}
func (m *CommandResultList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandResultList.DiscardUnknown(m)
}

var xxx_messageInfo_CommandResultList proto.InternalMessageInfo

func (m *CommandResultList) GetResults() []*CommandResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func init() {
	proto.RegisterEnum("kvstore.CommandType", CommandType_name, CommandType_value)
	proto.RegisterEnum("kvstore.LeaseGetStatus", LeaseGetStatus_name, LeaseGetStatus_value)
	proto.RegisterType((*Command)(nil), "kvstore.Command")
	proto.RegisterType((*CommandResult)(nil), "kvstore.CommandResult")
	proto.RegisterType((*CommandLeaseGet)(nil), "kvstore.CommandLeaseGet")
	proto.RegisterType((*CommandLeaseGetResult)(nil), "kvstore.CommandLeaseGetResult")
	proto.RegisterType((*CommandLeaseSet)(nil), "kvstore.CommandLeaseSet")
	proto.RegisterType((*CommandLeaseSetResult)(nil), "kvstore.CommandLeaseSetResult")
	proto.RegisterType((*CommandInvalidate)(nil), "kvstore.CommandInvalidate")
	proto.RegisterType((*CommandInvalidateResult)(nil), "kvstore.CommandInvalidateResult")
	proto.RegisterType((*CommandList)(nil), "kvstore.CommandList")
	proto.RegisterType((*CommandResultList)(nil), "kvstore.CommandResultList")
}

func init() { proto.RegisterFile("command.proto", fileDescriptor_213c0bb044472049) }

var fileDescriptor_213c0bb044472049 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x9d, 0xb6, 0x49, 0x6e, 0xd4, 0x7c, 0xfe, 0x46, 0xa5, 0x31, 0x01, 0x99, 0xc8, 0x15,
	0x52, 0x54, 0xa1, 0x04, 0xa5, 0xaa, 0x10, 0x64, 0x83, 0x49, 0xa6, 0x95, 0x51, 0x9a, 0x96, 0xb1,
	0x83, 0x04, 0x1b, 0xcb, 0x89, 0xa7, 0xc1, 0x6a, 0xfe, 0x14, 0x8f, 0x23, 0x65, 0xc7, 0x86, 0x77,
	0xe0, 0x91, 0x58, 0xf2, 0x08, 0x28, 0xac, 0x79, 0x07, 0xe4, 0x9f, 0x0c, 0xf9, 0x97, 0x10, 0xab,
	0xcc, 0xcd, 0x3d, 0xe7, 0xde, 0x73, 0x8e, 0xc7, 0x86, 0xa3, 0xce, 0xb0, 0xdf, 0xb7, 0x07, 0x4e,
	0x69, 0x34, 0x1e, 0xb2, 0x21, 0x4a, 0xde, 0x4f, 0x3c, 0x36, 0x1c, 0x53, 0xf5, 0x97, 0x00, 0xc9,
	0x5a, 0xd4, 0x42, 0x45, 0xd8, 0x67, 0xd3, 0x11, 0x95, 0x85, 0x82, 0x50, 0xcc, 0x56, 0x8e, 0x4b,
	0x31, 0xa6, 0x14, 0xf7, 0xcd, 0xe9, 0x88, 0x92, 0x10, 0x81, 0xb2, 0x20, 0xba, 0x8e, 0x2c, 0x16,
	0x84, 0xe2, 0x3e, 0x11, 0x5d, 0x07, 0x5d, 0x40, 0xba, 0x47, 0x6d, 0x8f, 0x5a, 0x5d, 0xca, 0xe4,
	0x44, 0x41, 0x28, 0x66, 0x2a, 0xf2, 0x2a, 0xbd, 0x11, 0x00, 0xae, 0x28, 0x23, 0xa9, 0x5e, 0x7c,
	0xfa, 0x43, 0xf3, 0x28, 0x93, 0xf7, 0x77, 0xd0, 0x0c, 0x4e, 0x33, 0x28, 0x43, 0xaf, 0x00, 0xdc,
	0xc1, 0xc4, 0xee, 0xb9, 0x8e, 0xcd, 0xa8, 0x7c, 0x10, 0xf2, 0xf2, 0xab, 0x3c, 0x9d, 0x23, 0xc8,
	0x02, 0x5a, 0xfd, 0x22, 0xc2, 0x51, 0x8c, 0x20, 0xd4, 0xf3, 0x7b, 0xec, 0x1f, 0x5c, 0x57, 0xd7,
	0x5d, 0x2b, 0x5b, 0x5d, 0x87, 0xcb, 0x16, 0xbc, 0x57, 0xd7, 0xbd, 0x2b, 0x5b, 0xbd, 0x2f, 0x92,
	0x83, 0x04, 0x5e, 0x6f, 0x48, 0xa0, 0xb0, 0x23, 0x81, 0x88, 0xbf, 0x98, 0xc3, 0x29, 0xfc, 0xb7,
	0xa2, 0x10, 0x49, 0x90, 0xb8, 0xa7, 0xd3, 0x30, 0x87, 0x34, 0x09, 0x8e, 0xea, 0x14, 0x1e, 0x6c,
	0xb4, 0x81, 0xca, 0x70, 0xe8, 0x31, 0x9b, 0xf9, 0x5e, 0x9c, 0x5a, 0x8e, 0xef, 0x9e, 0x03, 0x8d,
	0xb0, 0x4d, 0x62, 0x18, 0x7a, 0x08, 0x91, 0x78, 0x8b, 0x07, 0x98, 0x0c, 0x6b, 0xdd, 0x41, 0xc7,
	0x70, 0x30, 0xb1, 0x7b, 0x3e, 0x0d, 0x13, 0x4c, 0x93, 0xa8, 0x50, 0xcd, 0x65, 0x7d, 0xc6, 0x26,
	0x7d, 0x7f, 0x3f, 0xf5, 0x7c, 0xd9, 0x10, 0x8f, 0x16, 0xe5, 0x21, 0x65, 0xdf, 0xdd, 0xd1, 0x0e,
	0xa3, 0x4e, 0xb8, 0x20, 0x45, 0x78, 0xad, 0x3e, 0x85, 0xff, 0xd7, 0x12, 0xdd, 0x10, 0xd6, 0x05,
	0xe4, 0xb6, 0x04, 0xbf, 0x73, 0x7a, 0x15, 0x32, 0x73, 0x49, 0xae, 0xc7, 0xd0, 0x33, 0x48, 0xc5,
	0x6f, 0x6a, 0x90, 0x6d, 0xa2, 0x98, 0xa9, 0x48, 0xab, 0xcf, 0x95, 0x70, 0x84, 0x8a, 0xb9, 0xb4,
	0x68, 0x53, 0x38, 0xe2, 0x39, 0x24, 0xc7, 0x61, 0x35, 0x9f, 0x70, 0xb2, 0x36, 0x21, 0xba, 0x0f,
	0x73, 0xd8, 0xd9, 0x67, 0x81, 0x8b, 0x08, 0xae, 0x3b, 0x7a, 0x0c, 0x72, 0xed, 0xe6, 0xfa, 0x5a,
	0x6b, 0xd6, 0x2d, 0xf3, 0xc3, 0x2d, 0xb6, 0x5a, 0x4d, 0xe3, 0x16, 0xd7, 0xf4, 0x4b, 0x1d, 0xd7,
	0xa5, 0x3d, 0x94, 0x87, 0x93, 0xa5, 0x6e, 0x03, 0x6b, 0x06, 0xb6, 0xae, 0xb0, 0x29, 0x09, 0x5b,
	0x7a, 0x06, 0x36, 0x25, 0x11, 0x3d, 0x82, 0xdc, 0x52, 0x4f, 0x6f, 0xbe, 0xd7, 0x1a, 0x7a, 0x5d,
	0x33, 0xb1, 0x94, 0x38, 0xf3, 0x21, 0xbb, 0x7c, 0x75, 0x82, 0x51, 0x7c, 0xb2, 0x65, 0x98, 0x9a,
	0xd9, 0x32, 0xac, 0xcb, 0x9b, 0x56, 0x33, 0x90, 0xa0, 0x82, 0xb2, 0xd6, 0x8b, 0xff, 0x20, 0x5a,
	0xd3, 0xc4, 0x75, 0x49, 0x40, 0xa7, 0xf0, 0x64, 0x0b, 0x86, 0xe0, 0xb7, 0xb8, 0x16, 0x80, 0xc4,
	0x37, 0xf5, 0x6f, 0x33, 0x45, 0xf8, 0x3e, 0x53, 0x84, 0x1f, 0x33, 0x45, 0xf8, 0xfa, 0x53, 0xd9,
	0xfb, 0x58, 0xe9, 0xba, 0xec, 0x93, 0xdf, 0x2e, 0x75, 0x86, 0xfd, 0xf2, 0x3b, 0xdf, 0x1e, 0x74,
	0x4d, 0x7f, 0xd0, 0x7d, 0xf9, 0xa2, 0x1c, 0x47, 0x38, 0xff, 0x1d, 0xb5, 0xab, 0xfc, 0xd4, 0x3e,
	0x0c, 0x3f, 0xaa, 0xe7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x45, 0xa3, 0x18, 0x9c, 0x65, 0x05,
	0x00, 0x00,
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Command) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Invalidate != nil {
		{
			size, err := m.Invalidate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LeaseSet != nil {
		{
			size, err := m.LeaseSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LeaseGet != nil {
		{
			size, err := m.LeaseGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Invalidate != nil {
		{
			size, err := m.Invalidate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LeaseSet != nil {
		{
			size, err := m.LeaseSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LeaseGet != nil {
		{
			size, err := m.LeaseGet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommand(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandLeaseGet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandLeaseGet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandLeaseGet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommandLeaseGetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandLeaseGetResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandLeaseGetResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LeaseId != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.LeaseId))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandLeaseSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandLeaseSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandLeaseSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LeaseId != 0 {
		i = encodeVarintCommand(dAtA, i, uint64(m.LeaseId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommandLeaseSetResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandLeaseSetResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandLeaseSetResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Affected {
		i--
		if m.Affected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandInvalidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandInvalidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandInvalidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCommand(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommandInvalidateResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandInvalidateResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandInvalidateResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Affected {
		i--
		if m.Affected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommandList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CommandResultList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandResultList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommandResultList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommand(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommand(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommand(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Command) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommand(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovCommand(uint64(m.Id))
	}
	if m.LeaseGet != nil {
		l = m.LeaseGet.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.LeaseSet != nil {
		l = m.LeaseSet.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Invalidate != nil {
		l = m.Invalidate.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCommand(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovCommand(uint64(m.Id))
	}
	if m.LeaseGet != nil {
		l = m.LeaseGet.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.LeaseSet != nil {
		l = m.LeaseSet.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.Invalidate != nil {
		l = m.Invalidate.Size()
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandLeaseGet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandLeaseGetResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCommand(uint64(m.Status))
	}
	if m.LeaseId != 0 {
		n += 1 + sovCommand(uint64(m.LeaseId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandLeaseSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.LeaseId != 0 {
		n += 1 + sovCommand(uint64(m.LeaseId))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandLeaseSetResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Affected {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandInvalidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCommand(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandInvalidateResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Affected {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommandResultList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovCommand(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommand(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommand(x uint64) (n int) {
	return sovCommand(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseGet == nil {
				m.LeaseGet = &CommandLeaseGet{}
			}
			if err := m.LeaseGet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseSet == nil {
				m.LeaseSet = &CommandLeaseSet{}
			}
			if err := m.LeaseSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invalidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invalidate == nil {
				m.Invalidate = &CommandInvalidate{}
			}
			if err := m.Invalidate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= CommandType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseGet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseGet == nil {
				m.LeaseGet = &CommandLeaseGetResult{}
			}
			if err := m.LeaseGet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseSet == nil {
				m.LeaseSet = &CommandLeaseSetResult{}
			}
			if err := m.LeaseSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invalidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invalidate == nil {
				m.Invalidate = &CommandInvalidateResult{}
			}
			if err := m.Invalidate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandLeaseGet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandLeaseGet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandLeaseGet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandLeaseGetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandLeaseGetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandLeaseGetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LeaseGetStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseId", wireType)
			}
			m.LeaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandLeaseSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandLeaseSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandLeaseSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseId", wireType)
			}
			m.LeaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandLeaseSetResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandLeaseSetResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandLeaseSetResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Affected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandInvalidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandInvalidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandInvalidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandInvalidateResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandInvalidateResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandInvalidateResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Affected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &Command{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandResultList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandResultList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandResultList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommand
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommand
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &CommandResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommand(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommand
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommand(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommand
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommand
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommand
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommand
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommand
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommand        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommand          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommand = fmt.Errorf("proto: unexpected end of group")
)
